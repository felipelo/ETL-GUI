package com.felipelo.etlgui.schema;

import br.com.saxes.suite.converter.ValueType;
import br.com.saxes.suite.model.TextTreeNode;
import br.com.saxes.suite.model.txt.LineTreeNode;
import com.felipelo.etlgui.schema.model.TextMutable;
import com.felipelo.etlgui.schema.model.TreeNodeMutable;
import com.felipelo.etlgui.schema.txt.TextNodePropTableModel;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarInputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

/**
 *
 * @author felipe
 */
public abstract class TreeSchemaEditor extends javax.swing.JFrame {

	protected DefaultTreeModel treeModel;
	private PropertyTableModel tableModel;
	
	private TreeNodeMutable treeRoot;
	
	/** Creates new form TreeSchemaEditor */
	public TreeSchemaEditor() {		
//		treeRoot = new DelimitedTXTTreeSchema();
//		treeSchema.setName("Delimited Txt Schema");
		
//		LineTreeNode _line = new LineTreeNode();
//		_line.setName("Line");
//		treeSchema.setRoot( _line );
		
		treeModel = new DefaultTreeModel( null );
		
//		DelimitedTXTMutable _mTreeSchema = new DelimitedTXTMutable(treeSchema, new DelimitedTXTTreeSchemaPropTableModel(treeModel));
//		TreeNodeMutable _mLine = new TreeNodeMutable(_line, new PropertyTableModel(treeModel));
		
//		_mTreeSchema.add( _mLine );
		
		tableModel = new PropertyTableModel( treeModel );
		
		treeModel.addTreeModelListener( new TreeModelListener() {

			@Override
			public void treeNodesChanged(TreeModelEvent e) {}
			@Override
			public void treeNodesRemoved(TreeModelEvent e) {}

			@Override
			public void treeNodesInserted(TreeModelEvent e) {
				for( Object _on : e.getChildren() ) {
					TreeNode[] _treeNodes = treeModel.getPathToRoot((TreeNode)_on);
					TreePath _path = new TreePath(_treeNodes);
					
					jTree1.setSelectionPath(_path);
				}
			}

			@Override
			public void treeStructureChanged(TreeModelEvent e) {
				jTree1.expandPath( e.getTreePath() );
				jTree1.setSelectionPath( e.getTreePath() );
			}
		});
		
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel4 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TreeSchema Editor");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.BorderLayout());

        jToolBar2.setFloatable(false);

        jButton1.setText("N");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setMaximumSize(new java.awt.Dimension(36, 36));
        jButton1.setMinimumSize(new java.awt.Dimension(36, 36));
        jButton1.setPreferredSize(new java.awt.Dimension(36, 36));
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton1);

        jPanel4.add(jToolBar2, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jPanel4, gridBagConstraints);

        jPanel2.setMinimumSize(new java.awt.Dimension(100, 53));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jTree1.setModel(treeModel);
        jTree1.setCellRenderer(new com.felipelo.etlgui.schema.DefaultTreeNodeTreeCellRenderer());
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToolBar1.setFloatable(false);
        jToolBar1.setBorderPainted(false);

        btnAdd.setText("+");
        btnAdd.setToolTipText("Add Line");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setPreferredSize(new java.awt.Dimension(25, 25));
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdd);

        jButton2.setText("-");
        jButton2.setToolTipText("Remove");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setPreferredSize(new java.awt.Dimension(25, 25));
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jPanel2.add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jSplitPane1.setLeftComponent(jPanel2);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jTable1.setFont(new java.awt.Font("DejaVu Sans", 0, 11)); // NOI18N
        jTable1.setModel(tableModel);
        jTable1.setRowSelectionAllowed(false);
        jTable1.setShowVerticalLines(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable1);

        jPanel3.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 1);
        getContentPane().add(jSplitPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
		TreeNodeMutable _treeNode = (TreeNodeMutable)jTree1.getLastSelectedPathComponent();
		
		if( _treeNode == null ) {
			tableModel.setTreeNode(null);
			return;
		}
		
		tableModel = _treeNode.getPropTableModel();
		
		jTable1.setModel(tableModel);

		tableModel.setTreeNode( _treeNode );
		if( _treeNode.getUserObject() instanceof TextTreeNode ) {
			JComboBox _comp = new JComboBox();
			_comp.setFont(jTable1.getFont());
			_comp.setBorder(null);
			for( ValueType _valueType : ValueType.values() ) {
				_comp.addItem( _valueType );
			}
			
			jTable1.getColumnModel().getColumn(1).setCellEditor( new TextPropertyCellEditor() );
		} else {
			JTextField _jTextField = new JTextField();
			_jTextField.setBorder(null);
			_jTextField.setFont(jTable1.getFont());
			
			jTable1.getColumnModel().getColumn(1).setCellEditor( new PropertyCellEditor() );
		}
}//GEN-LAST:event_jTree1ValueChanged

private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
		DefaultMutableTreeNode _node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
		
		TreeNodeMutable _newNode;
		
		//if there is no nodes in the tree
		if( _node == null && treeModel.getRoot() == null ) {
			_newNode = startNewSchema();
			treeModel.setRoot(_newNode);
		} else {
			_newNode = addNode(_node);		
			_node.insert(_newNode, _node.getChildCount());
			treeModel.reload(_node);
		}
}//GEN-LAST:event_btnAddActionPerformed

public abstract TreeNodeMutable addNode( DefaultMutableTreeNode selectedNode );

public abstract TreeNodeMutable startNewSchema();

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
		DefaultMutableTreeNode _node = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
		if( _node.getChildCount() > 0 )
			return;
		treeModel.removeNodeFromParent(_node);
	}//GEN-LAST:event_jButton2ActionPerformed

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
		try {
			Object o[] = getClasses("br.com.saxes.suite.model");
			JAXBContext context = JAXBContext.newInstance(getClasses("br.com.saxes.suite.model"));
			
			Marshaller m = context.createMarshaller();
			m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
			
			DefaultMutableTreeNode d = (DefaultMutableTreeNode) treeModel.getRoot();
			m.marshal(d.getUserObject(), System.out);
		} catch (Exception ex) {
			Logger.getLogger(TreeSchemaEditor.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}//GEN-LAST:event_jButton1ActionPerformed
	
	private static Class[] getClasses(String packageName)
            throws ClassNotFoundException, IOException {
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        assert classLoader != null;
        String path = packageName.replace('.', '/');
        Enumeration<URL> resources = classLoader.getResources(path);
        List<File> dirs = new ArrayList<File>();
		ArrayList<Class> classes = new ArrayList<Class>();
        while (resources.hasMoreElements()) {
            URL resource = resources.nextElement();
            dirs.add(new File(resource.getFile()));
			JarInputStream jarFile = new JarInputStream(new FileInputStream (resource.getFile().substring(5, resource.getFile().indexOf("!"))));

			JarEntry jarEntry;
			
			while (true) {
				jarEntry = jarFile.getNextJarEntry();
				if (jarEntry == null) {
					break;
				}
				
				if( jarEntry.getName().startsWith(path) 
						&& jarEntry.getName().endsWith(".class")) {
						classes.add(Class.forName(jarEntry.getName().substring(0, jarEntry.getName().length()-".class".length()).replaceAll("/", "\\.")));
				}
			}

        }
        
//        for (File directory : dirs) {
//            classes.addAll(findClasses(directory, packageName));
//        }
        return classes.toArray(new Class[classes.size()]);
    }

    private static List<Class> findClasses(File directory, String packageName) throws ClassNotFoundException {
        List<Class> classes = new ArrayList<Class>();
        if (!directory.exists()) {
            return classes;
        }
        File[] files = directory.listFiles();
        for (File file : files) {
            if (file.isDirectory()) {
                assert !file.getName().contains(".");
                classes.addAll(findClasses(file, packageName + "." + file.getName()));
            } else if (file.getName().endsWith(".class")) {
                classes.add(Class.forName(packageName + '.' + file.getName().substring(0, file.getName().length() - 6)));
            }
        }
        return classes;
    }
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
